//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 21.10.2025 09:43:03
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace ADOTEST.Lib.Models
{

    public partial class ADOTestDbContext : DbContext
    {

        public ADOTestDbContext() :
            base()
        {
            OnCreated();
        }

        public ADOTestDbContext(DbContextOptions<ADOTestDbContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=SQL-SRV1;Initial Catalog=ADOTest;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Abteilung> Abteilungs
        {
            get;
            set;
        }

        public virtual DbSet<Funktion> Funktions
        {
            get;
            set;
        }

        public virtual DbSet<Mitarbeiter> Mitarbeiters
        {
            get;
            set;
        }

        public virtual DbSet<Niederlassung> Niederlassungs
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.AbteilungMapping(modelBuilder);
            this.CustomizeAbteilungMapping(modelBuilder);

            this.FunktionMapping(modelBuilder);
            this.CustomizeFunktionMapping(modelBuilder);

            this.MitarbeiterMapping(modelBuilder);
            this.CustomizeMitarbeiterMapping(modelBuilder);

            this.NiederlassungMapping(modelBuilder);
            this.CustomizeNiederlassungMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Abteilung Mapping

        private void AbteilungMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Abteilung>().ToTable(@"abteilung", @"dbo");
            modelBuilder.Entity<Abteilung>().Property(x => x.AbteilungId).HasColumnName(@"abteilungId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Abteilung>().Property(x => x.Abteilungsbezeichnung).HasColumnName(@"abteilungsbezeichnung").HasColumnType(@"nchar(20)").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<Abteilung>().HasKey(@"AbteilungId");
        }

        partial void CustomizeAbteilungMapping(ModelBuilder modelBuilder);

        #endregion

        #region Funktion Mapping

        private void FunktionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Funktion>().ToTable(@"Funktion", @"dbo");
            modelBuilder.Entity<Funktion>().Property(x => x.FunktionId).HasColumnName(@"FunktionId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Funktion>().Property(x => x.Funktionsbezeichnung).HasColumnName(@"Funktionsbezeichnung").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Funktion>().HasKey(@"FunktionId");
        }

        partial void CustomizeFunktionMapping(ModelBuilder modelBuilder);

        #endregion

        #region Mitarbeiter Mapping

        private void MitarbeiterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Mitarbeiter>().ToTable(@"mitarbeiter", @"dbo");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.MitarbeiterId).HasColumnName(@"mitarbeiterId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Prsnr).HasColumnName(@"prsnr").HasColumnType(@"varchar(4)").ValueGeneratedOnAdd().HasMaxLength(4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Nachname).HasColumnName(@"nachname").HasColumnType(@"nvarchar(50)").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Vorname).HasColumnName(@"vorname").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Geschlecht).HasColumnName(@"geschlecht").HasColumnType(@"varchar(1)").ValueGeneratedOnAdd().HasMaxLength(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Datumeintritt).HasColumnName(@"datumeintritt").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Datumaustritt).HasColumnName(@"datumaustritt").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Extern).HasColumnName(@"extern").HasColumnType(@"bit").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar(50)").IsRequired().ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Durchwahl).HasColumnName(@"durchwahl").HasColumnType(@"varchar(50)").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.AbteilungId).HasColumnName(@"abteilungId").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(10, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.FunktionId).HasColumnName(@"funktionId").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(10, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.Geburtsdatum).HasColumnName(@"geburtsdatum").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<Mitarbeiter>().Property(x => x.NiederlassungId).HasColumnName(@"NiederlassungId").ValueGeneratedNever();
            modelBuilder.Entity<Mitarbeiter>().HasKey(@"MitarbeiterId");
        }

        partial void CustomizeMitarbeiterMapping(ModelBuilder modelBuilder);

        #endregion

        #region Niederlassung Mapping

        private void NiederlassungMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Niederlassung>().ToTable(@"niederlassung");
            modelBuilder.Entity<Niederlassung>().Property(x => x.NiederlassungId).HasColumnName(@"NiederlassungId").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Niederlassung>().Property(x => x.Niederlassungsbezeichnung).HasColumnName(@"Niederlassungsbezeichnung").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Niederlassung>().Property(x => x.Niederlassungsvorwahl).HasColumnName(@"Niederlassungsvorwahl").ValueGeneratedNever();
            modelBuilder.Entity<Niederlassung>().HasKey(@"NiederlassungId");
        }

        partial void CustomizeNiederlassungMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Abteilung>().HasMany(x => x.MitarbeiterListe).WithOne(op => op.Abteilung).HasForeignKey(@"AbteilungId").IsRequired(false);

            modelBuilder.Entity<Funktion>().HasMany(x => x.MitarbeiterListe).WithOne(op => op.Funktion).HasForeignKey(@"FunktionId").IsRequired(false);

            modelBuilder.Entity<Mitarbeiter>().HasOne(x => x.Funktion).WithMany(op => op.MitarbeiterListe).HasForeignKey(@"FunktionId").IsRequired(false);
            modelBuilder.Entity<Mitarbeiter>().HasOne(x => x.Abteilung).WithMany(op => op.MitarbeiterListe).HasForeignKey(@"AbteilungId").IsRequired(false);
            modelBuilder.Entity<Mitarbeiter>().HasOne(x => x.Niederlassung).WithMany(op => op.MitarbeiterListe).HasForeignKey(@"NiederlassungId").IsRequired(true);

            modelBuilder.Entity<Niederlassung>().HasMany(x => x.MitarbeiterListe).WithOne(op => op.Niederlassung).HasForeignKey(@"NiederlassungId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
