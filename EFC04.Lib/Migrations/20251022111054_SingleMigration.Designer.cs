// <auto-generated />
using System;
using EFC04.Lib.Models.Single;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFC04.Lib.Migrations
{
    [DbContext(typeof(EFC04_SingleDBContext))]
    [Migration("20251022111054_SingleMigration")]
    partial class SingleMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFC04.Lib.Models.Single.Adresse", b =>
                {
                    b.Property<int>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdresseId"));

                    b.Property<string>("Hausnummer")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("KundeDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Land")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ort")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Plz")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Strasse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdresseId");

                    b.HasIndex("KundeDetailsId")
                        .IsUnique()
                        .HasFilter("[KundeDetailsId] IS NOT NULL");

                    b.ToTable("Adresse", "single");
                });

            modelBuilder.Entity("EFC04.Lib.Models.Single.Kunde", b =>
                {
                    b.Property<int>("KundeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Geburtsdatum")
                        .HasPrecision(0)
                        .HasColumnType("date");

                    b.Property<string>("Geschlecht")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("KundeDetailsId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Kundeseit")
                        .HasPrecision(0)
                        .HasColumnType("date");

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Vorname")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("KundeId");

                    b.ToTable("Kunde", "single");
                });

            modelBuilder.Entity("EFC04.Lib.Models.Single.KundeDetails", b =>
                {
                    b.Property<int>("KundeDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KundeDetailsId"));

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("KundeId")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("KundeDetailsId");

                    b.ToTable("KundeDetails", "single");
                });

            modelBuilder.Entity("EFC04.Lib.Models.Single.Adresse", b =>
                {
                    b.HasOne("EFC04.Lib.Models.Single.KundeDetails", "KundeDetails")
                        .WithOne("Anschrift")
                        .HasForeignKey("EFC04.Lib.Models.Single.Adresse", "KundeDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("KundeDetails");
                });

            modelBuilder.Entity("EFC04.Lib.Models.Single.Kunde", b =>
                {
                    b.HasOne("EFC04.Lib.Models.Single.KundeDetails", "Kundedetails")
                        .WithOne("Kunde")
                        .HasForeignKey("EFC04.Lib.Models.Single.Kunde", "KundeId")
                        .HasPrincipalKey("EFC04.Lib.Models.Single.KundeDetails", "KundeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Kundedetails");
                });

            modelBuilder.Entity("EFC04.Lib.Models.Single.KundeDetails", b =>
                {
                    b.Navigation("Anschrift");

                    b.Navigation("Kunde");
                });
#pragma warning restore 612, 618
        }
    }
}
